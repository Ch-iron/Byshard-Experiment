# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib
*.zip

# Test binary, built with `go test -c`
*.test
*.xml
latency
*.csv
mem_*
cpu_*
server.*.log
client.*.log
*error*.log
*.log


# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/
.idea/
.DS_Store

server.pid
client.pid

bin/client
bin/server

bin/deploy/client
bin/deploy/server

bin/deploy/linux/client
bin/deploy/linux/server

bin/deploy/linux-docker/client
bin/deploy/linux-docker/server

bin/deploy/macos/client
bin/deploy/macos/server

common/statedb
AWSController/aws

.log
/package-lock.json
/node_modules/


# AWS script
*.id
*.file
*.dns

bin/deploy/ips.txt
bin/deploy/public_ips.txt
bin/deploy/log

bin/error.log

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc